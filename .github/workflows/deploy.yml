name: Java Servlet CI/CD Workflow

# Workflow 트리거 조건
# - dev 브랜치에 push하거나 pull request가 있을 때 실행
on:
  push:
    branches:
      - dev


# 환경 변수 설정
env:
  REGION: ${{ secrets.REGION }}  # AWS 리전 정보
  ECS_CLUSTER: luckyweeky-ecs-cluster  # ECS 클러스터 이름
  SERVICE_NAME: luckyweeky-service  # ECS 서비스 이름

jobs:
  build-and-deploy:
    name: Build and Deploy Docker Image
    runs-on: ubuntu-latest  # Ubuntu 최신 환경에서 실행

    steps:
      # 1. GitHub 저장소 코드 가져오기
      - name: Checkout Code
        uses: actions/checkout@v3
        # 저장소의 코드를 Workflow 실행 환경으로 가져옵니다.

      # 2. Java 17 설치
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

        # Maven 빌드를 위한 Java 환경 설정

      # 3. Maven 빌드 (테스트 제외)
      - name: Build with Maven (Skip Tests)
        run: mvn clean package -DskipTests
        # Maven으로 프로젝트를 빌드합니다.
        # 테스트는 실행하지 않고 빌드만 수행합니다.

      # 4. 빌드 결과 확인
      - name: Check WAR File
        run: ls -al target/
        # 빌드된 WAR 파일이 target 디렉토리에 생성되었는지 확인합니다.

      # 5. Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # Docker 이미지를 빌드하기 위한 환경 설정

      # 6. Docker Hub 로그인
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        # Docker Hub에 로그인하여 이미지를 푸시할 준비를 합니다.

      # 7. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/luckyweeky-server:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/luckyweeky-server:latest
        # Maven 빌드 결과(WAR 파일)를 포함하는 Docker 이미지를 빌드하고 Docker Hub에 푸시합니다.

      # 8. AWS ECS 태스크 정의 등록
      - name: Register Task Definition
        run: |
          aws ecs register-task-definition --cli-input-json file://ecs-task-definition.json
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # ECS에서 실행할 태스크 정의를 업데이트합니다.

      # 9. AWS ECS 서비스 업데이트
      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $SERVICE_NAME --force-new-deployment --region ${{ secrets.REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # ECS 서비스에 새로 빌드된 Docker 이미지를 배포합니다.
