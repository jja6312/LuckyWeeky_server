name: Java Servlet CI/CD Workflow

on:
  push:
    branches:
      - dev

env:
  REGION: ${{ secrets.REGION }}
  ECS_CLUSTER: luckyweeky-ecs-cluster
  SERVICE_NAME: luckyweeky-service

jobs:
  build-and-deploy:
    name: Build and Deploy Docker Image
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 저장소 코드 가져오기
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Java 17 설치
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Maven 빌드 (테스트 제외)
      - name: Build with Maven (Skip Tests)
        run: mvn clean package -DskipTests

      # 4. 빌드 결과 확인
      - name: Check WAR File
        run: ls -al target/

      # 5. Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 6. Docker Hub 로그인
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 7. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
          TAG=${{ github.sha }} # 변경: 커밋 해시를 Docker 이미지 태그로 설정
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/luckyweeky-server # 변경: 태그와 함께 `latest`도 추가
          docker build -t $IMAGE_NAME:${TAG} -t $IMAGE_NAME:latest . # 변경: 최신 `latest` 태그 추가
          docker push $IMAGE_NAME:${TAG}
          docker push $IMAGE_NAME:latest # 변경: `latest` 태그를 추가로 푸시

      # 8. AWS Secrets Manager에서 환경 변수 가져오기
      - name: Fetch Secrets from AWS Secrets Manager
        id: fetch_secrets
        run: |
          secrets=$(aws secretsmanager get-secret-value --secret-id luckyweeky-env-vars --query 'SecretString' --output text --region ${{ secrets.REGION }})
          echo $secrets > secrets.json
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # 9. 환경 변수 주입 후 Task Definition 업데이트
      - name: Update Task Definition
        run: |
          TAG=${{ github.sha }} # 변경: Docker 이미지의 커밋 해시 태그를 태스크 정의에 반영
          sed 's|law10000hours/luckyweeky-server:latest|law10000hours/luckyweeky-server:'"${TAG}"'|g' ecs-task-definition.json > ecs-task-definition-updated.json
          sed -i '/"taskRoleArn":/d' ecs-task-definition-updated.json # 변경: `taskRoleArn` 제거 (필요 없는 경우 대비)
    

      # 10. Register Task Definition
      - name: Register Task Definition
        id: register_task_definition
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://ecs-task-definition-updated.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text \
            --region $REGION)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
          echo "Registered Task Definition: $TASK_DEF_ARN"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          REGION: ${{ secrets.REGION }}

      # 11. Debug TASK_DEF_ARN
      - name: Debug TASK_DEF_ARN
        run: |
          echo "TASK_DEF_ARN=${{ env.TASK_DEF_ARN }}"
        env:
          TASK_DEF_ARN: ${{ env.TASK_DEF_ARN }}

      # 12. Update ECS Service
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $SERVICE_NAME \
            --task-definition $TASK_DEF_ARN \
            --region ${{ secrets.REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TASK_DEF_ARN: ${{ env.TASK_DEF_ARN }}
# 13. ECS 서비스 상태 확인 및 디버깅 (추가)
      - name: Describe ECS Service
        run: |
          aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $SERVICE_NAME \
            --region ${{ secrets.REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          REGION: ${{ secrets.REGION }}